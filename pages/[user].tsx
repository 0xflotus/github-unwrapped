import { RenderProgress } from "@remotion/lambda";
import { Player } from "@remotion/player";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { lighten, transparentize } from "polished";
import React from "react";
import { getFont } from "../remotion/font";
import { Main } from "../remotion/Main";
import { CompactStats } from "../remotion/map-response-to-stats";
import { backButton } from "../src/components/button";
import Download from "../src/components/Download";
import { Footer, FOOTER_HEIGHT } from "../src/components/Footer";
import Spinner from "../src/components/spinner";
import { getRenderOrMake } from "../src/get-render-or-make";
import { getStatsOrFetch } from "../src/get-stats-or-fetch";
import { BACKGROUND_COLOR, BASE_COLOR } from "../src/palette";

export async function getStaticPaths() {
  return { paths: [], fallback: true };
}

export const getStaticProps = async ({ params }) => {
  const { user } = params;

  if (user.length > 40) {
    console.log("Username too long");
    return { notFound: true };
  }

  try {
    const compact = await getStatsOrFetch(user);
    if (!compact) {
      return { notFound: true };
    }
    const { progress, bucketName, renderId } = await getRenderOrMake(
      user,
      compact
    );
    return { props: { user: compact, progress, bucketName, renderId } };
  } catch (error) {
    console.error(error);
    return { notFound: true };
  }
};

const style: React.CSSProperties = {
  display: "flex",
  flexDirection: "column",
  maxWidth: 800,
  margin: "auto",
  paddingLeft: 20,
  paddingRight: 20,
};

const container: React.CSSProperties = {
  backgroundColor: BACKGROUND_COLOR,
  minHeight: `calc(100vh - ${FOOTER_HEIGHT}px)`,
  width: "100%",
};

const title: React.CSSProperties = {
  fontFamily: "Jelle",
  textAlign: "center",
  color: BASE_COLOR,
  marginBottom: 0,
};

const subtitle: React.CSSProperties = {
  fontFamily: "Jelle",
  textAlign: "center",
  fontSize: 20,
  color: lighten(0.3, BASE_COLOR),
  marginTop: 14,
  marginBottom: 0,
};

const layout: React.CSSProperties = {
  margin: "auto",
  width: "100%",
  display: "flex",
  flexDirection: "column",
};

getFont();

export default function User(props: {
  user: CompactStats | null;
  renderId: string;
  progress: RenderProgress;
  bucketName: string;
}) {
  const { user, progress, bucketName, renderId } = props;

  const router = useRouter();
  const username = ([] as string[]).concat(router.query.user)[0];
  if (!user) {
    return <Spinner></Spinner>;
  }

  return (
    <div>
      <Head>
        <title>
          {username}
          {"'"}s #GithubWrapped
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div style={container}>
        <header style={style}>
          <br></br>
          <br></br>
          <h1 style={title}>Here is your #GithubWrapped!</h1>
          <h3 style={subtitle}>@{username}</h3>
          <br></br>
          {user ? (
            <>
              <Player
                // TODO: Investigate
                numberOfSharedAudioTags={0}
                component={Main}
                compositionHeight={1080}
                compositionWidth={1080}
                durationInFrames={990}
                fps={30}
                style={{
                  ...layout,
                  boxShadow: "0 0 10px " + transparentize(0.8, BASE_COLOR),
                }}
                controls
                inputProps={{
                  stats: user,
                }}
              ></Player>
            </>
          ) : null}
          <div
            style={{
              height: 40,
            }}
          ></div>
          <div style={layout}>
            <p
              style={{
                color: BASE_COLOR,
                fontFamily: "Jelle",
                textAlign: "center",
              }}
            >
              Download your video and tweet it using{" "}
              <span
                style={{
                  color: "black",
                }}
              >
                #GithubWrapped
              </span>{" "}
              hashtag!
            </p>
            <Link href="/" passHref>
              <Download
                initialProgress={progress}
                bucketName={bucketName}
                renderId={renderId}
                username={username}
              ></Download>
            </Link>
            <br></br>
            <Link href="/" passHref>
              <button style={backButton}>View for another user</button>
            </Link>
            <br />
            <br />
            <br />
          </div>
        </header>
      </div>
      <Footer></Footer>
    </div>
  );
}
