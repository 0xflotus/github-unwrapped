import { RenderProgress } from "@remotion/lambda";
import { Player } from "@remotion/player";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { transparentize } from "polished";
import React from "react";
import { getFont } from "../remotion/font";
import { Main } from "../remotion/Main";
import { CompactStats } from "../remotion/map-response-to-stats";
import { backButton } from "../src/components/button";
import Download from "../src/components/Download";
import { getRenderOrMake } from "../src/get-render-or-make";
import { getStatsOrFetch } from "../src/get-stats-or-fetch";
import { BACKGROUND_COLOR, BASE_COLOR } from "../src/palette";

export async function getStaticPaths() {
  return { paths: [], fallback: true };
}

export const getStaticProps = async ({ params }) => {
  const { user } = params;

  if (user.length > 40) {
    console.log("Username too long");
    return { notFound: true };
  }

  try {
    const compact = await getStatsOrFetch(user);
    if (!compact) {
      return { notFound: true };
    }
    const { progress, bucketName, renderId } = await getRenderOrMake(
      user,
      compact
    );
    return { props: { user: compact, progress, bucketName, renderId } };
  } catch (error) {
    console.error(error);
    return { notFound: true };
  }
};

const style: React.CSSProperties = {
  display: "flex",
  flexDirection: "column",
};

const container: React.CSSProperties = {
  backgroundColor: BACKGROUND_COLOR,
  minHeight: "100%",
  width: "100%",
  position: "absolute",
};

const title: React.CSSProperties = {
  fontFamily: "Jelle",
  textAlign: "center",
  color: BASE_COLOR,
};

const layout: React.CSSProperties = {
  width: 600,
  margin: "auto",
  maxWidth: "100%",
  display: "flex",
  flexDirection: "column",
};

getFont();

export default function User(props: {
  user: CompactStats | null;
  renderId: string;
  progress: RenderProgress;
  bucketName: string;
}) {
  const { user, progress, bucketName, renderId } = props;

  const router = useRouter();
  const username = ([] as string[]).concat(router.query.user)[0];
  if (!user) {
    return null;
  }

  return (
    <div style={container}>
      <Head>
        <title>
          {username}
          {"'"}s #GithubWrapped
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header style={style}>
        <h1 style={title}>üéÅ Your #GithubWrapped is ready!</h1>
        {user ? (
          <>
            <Player
              // TODO: Investigate
              numberOfSharedAudioTags={0}
              component={Main}
              compositionHeight={1080}
              compositionWidth={1080}
              durationInFrames={900}
              fps={30}
              style={{
                ...layout,
                boxShadow: "0 0 10px " + transparentize(0.8, BASE_COLOR),
              }}
              controls
              inputProps={{
                stats: user,
              }}
            ></Player>
          </>
        ) : null}
        <div
          style={{
            height: 40,
          }}
        ></div>
        <div style={layout}>
          <p
            style={{
              color: BASE_COLOR,
              fontFamily: "Jelle",
              textAlign: "center",
            }}
          >
            Download your video and tweet it using{" "}
            <span
              style={{
                color: "black",
              }}
            >
              #GithubWrapped
            </span>{" "}
            hashtag!
          </p>
          <Link href="/" passHref>
            <Download
              initialProgress={progress}
              bucketName={bucketName}
              renderId={renderId}
              username={username}
            ></Download>
          </Link>
          <br></br>
          <Link href="/" passHref>
            <button style={backButton}>View wrapped for another user</button>
          </Link>
        </div>
      </header>
    </div>
  );
}
