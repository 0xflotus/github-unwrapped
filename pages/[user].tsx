import { Player } from "@remotion/player";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { transparentize } from "polished";
import React from "react";
import { getFont } from "../remotion/font";
import { Main } from "../remotion/Main";
import {
  CompactStats,
  mapResponseToStats,
} from "../remotion/map-response-to-stats";
import { button } from "../src/components/button";
import Download from "../src/components/Download";
import { getFromCache, saveCache } from "../src/db/cache";
import { getAll } from "../src/get-all";
import { BACKGROUND_COLOR, BASE_COLOR } from "../src/palette";

export async function getStaticPaths() {
  return { paths: [], fallback: true };
}

export const getStaticProps = async ({ params }) => {
  const { user } = params;

  if (user.length > 40) {
    console.log("Username too long");
    return { notFound: true };
  }

  try {
    const cache = await getFromCache(user);
    if (cache) {
      return { props: { user: cache } };
    }
    const ast = await getAll(user, process.env.GITHUB_TOKEN);
    if (!ast.data.user) {
      return { notFound: true };
    }
    const compact = mapResponseToStats(ast);
    await saveCache(user, compact);
    return { props: { user: compact } };
  } catch (error) {
    console.error(error);
    return { notFound: true };
  }
};

const style: React.CSSProperties = {
  display: "flex",
  flexDirection: "column",
};

const container: React.CSSProperties = {
  backgroundColor: BACKGROUND_COLOR,
  height: "100%",
  width: "100%",
  position: "absolute",
};

const title: React.CSSProperties = {
  fontFamily: "Jelle",
  textAlign: "center",
  color: BASE_COLOR,
};

const layout: React.CSSProperties = {
  width: 600,
  margin: "auto",
  maxWidth: "100%",
  display: "flex",
  flexDirection: "row",
};

getFont();

export default function User({ user }: { user: CompactStats | null }) {
  const router = useRouter();
  const username = ([] as string[]).concat(router.query.user)[0];

  return (
    <div style={container}>
      <Head>
        <title>
          {username}
          {"'"}s #GithubWrapped
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header style={style}>
        <h1 style={title}>üéÅ Your #GithubWrapped is ready!</h1>
        {user ? (
          <>
            <Player
              // TODO: Investigate
              numberOfSharedAudioTags={0}
              component={Main}
              compositionHeight={1080}
              compositionWidth={1080}
              durationInFrames={900}
              fps={30}
              style={{
                ...layout,
                boxShadow: "0 0 10px " + transparentize(0.8, BASE_COLOR),
              }}
              controls
              inputProps={{
                stats: user,
              }}
            ></Player>
          </>
        ) : null}
        <div
          style={{
            height: 40,
          }}
        ></div>
        <div style={layout}>
          <div style={{ flex: 1 }}>
            <Link href="/" passHref>
              <Download username={username}></Download>
            </Link>
          </div>
          <div style={{ flex: 1 }}>
            <Link href="/" passHref>
              <button style={button}>Go back</button>
            </Link>
          </div>
        </div>
      </header>
    </div>
  );
}
